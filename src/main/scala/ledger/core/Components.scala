package ledger.core

import ledger.core.Ledger._


object Components {

  /**
   * Configuration needed to initialize a blockchain ledger.
   *
   * @param name          ledger name
   * @param seed          seed to generate UUIDs
   * @param initialTxnNum initial transaction number
   * @param txnPerBlock   number of transactions per block
   * @param currency      total currency hold by the ledger
   * @param txnFeePct     transaction fee percentage (paid by payer)
   */
  case class Config(name: String, seed: String,
                    initialTxnNum: Int,
                    txnPerBlock: Int,
                    currency: Float,
                    txnFeePct: Float)

  /**
   * A User account.
   *
   * @param nickName user nickname. Must be unique
   * @param address  autogenerated UUID
   * @param balance  total balance
   */
  final case class Account(nickName: String, address: String, balance: Float)

  /**
   * A Block represents a group of validated transactions for which a hashcode is generated.
   *
   * @param hash         hash code generated. It includes block's parameters and previous block hash
   * @param transactions list of transactions grouped in this blocked
   * @param balances     snapshot of all balances when closing this block
   */
  final case class Block(hash: String, transactions: List[Id], balances: List[(Name, Float)])

  /**
   * Transfer of money from payer to receiver.
   *
   * @param id       sequential Id
   * @param amount   amount to transfer
   * @param fee      fee to charge for this transaction, paid by payer
   * @param payload  any message/annotation
   * @param payer    payer ledger address
   * @param receiver receiver ledger address
   */
  final case class Transaction(id: Int, amount: Float, fee: Float,
                               payload: String,
                               payer: Name,
                               receiver: Name)

  // EXCEPTIONS
  case class InvalidAccount(s: String) extends Exception(s)
  case class InvalidTransaction(s: String) extends Exception(s)
  case class InvalidBlock(s: String) extends Exception(s)
  case class UnknownCommandException(s: String) extends Exception(s)
}
